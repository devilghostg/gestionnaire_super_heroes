{% extends 'base.html.twig' %}

{% block title %}Progression de la mission{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/pages/mission/progress.css') }}">
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="card action-card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h1 class="mb-0">{{ mission.title }}</h1>
                <div class="timer">
                    <span id="missionTimer" class="badge bg-primary">--:--</span>
                </div>
            </div>
            
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <!-- Barre de progression -->
                        <div class="progress-section mb-4">
                            <h4>Progression de la mission</h4>
                            <div class="progress" style="height: 25px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                                     role="progressbar" 
                                     style="width: {{ mission.progress|default(0) }}%"
                                     aria-valuenow="{{ mission.progress|default(0) }}" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">{{ mission.progress|default(0) }}%</div>
                            </div>
                        </div>

                        <!-- Journal de mission -->
                        <div class="mission-log-section">
                            <h4>Journal de mission</h4>
                            <div id="missionLog" class="mission-log">
                                {% if mission.result %}
                                    {% for line in mission.result|split('\n') %}
                                        <p>{{ line }}</p>
                                    {% endfor %}
                                {% else %}
                                    <p>[{{ "now"|date("H:i:s") }}] Mission démarrée...</p>
                                {% endif %}
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <!-- Informations du héros -->
                        <div class="hero-section">
                            <h4>Héros assignés</h4>
                            {% if mission.activeAssignments|length > 0 %}
                                {% for assignment in mission.activeAssignments %}
                                    <div class="hero-card" data-hero-id="{{ assignment.hero.id }}">
                                        <div class="hero-info">
                                            <h5 class="mb-1">{{ assignment.hero.name }}</h5>
                                            <p class="text-muted mb-2">{{ assignment.hero.alias }}</p>
                                        </div>
                                        
                                        <div class="energy-section">
                                            <h6 class="mb-2">Niveau d'énergie</h6>
                                            <div class="energy-bar">
                                                <div class="progress">
                                                    <div class="progress-bar {% if assignment.energy < 20 %}bg-danger{% elseif assignment.energy < 50 %}bg-warning{% else %}bg-success{% endif %}" 
                                                         role="progressbar" 
                                                         style="width: {{ assignment.energy }}%"
                                                         aria-valuenow="{{ assignment.energy }}" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        {{ assignment.energy|number_format(1) }}%
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% else %}
                                <p class="text-muted">Aucun héros assigné</p>
                            {% endif %}
                        </div>

                        <!-- Actions -->
                        <div class="mission-actions mt-4">
                            <form id="missionForm" method="post" action="{{ path('mission_complete', {'id': mission.id}) }}" class="d-grid gap-2">
                                <input type="hidden" name="_token" value="{{ csrf_token('complete' ~ mission.id) }}">
                                <button type="submit" class="btn btn-success" {% if mission.progress < 100 %}disabled{% endif %}>
                                    <i class="bi bi-check-circle"></i> Terminer la mission
                                </button>
                            </form>
                            
                            <form method="post" action="{{ path('mission_cancel', {'id': mission.id}) }}" class="d-grid gap-2 mt-2" onsubmit="return confirm('Êtes-vous sûr de vouloir annuler cette mission ?');">
                                <input type="hidden" name="_token" value="{{ csrf_token('cancel' ~ mission.id) }}">
                                <button type="submit" class="btn btn-danger">
                                    <i class="bi bi-x-circle"></i> Annuler la mission
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        let progress = {{ mission.progress|default(0) }};
        const progressBar = document.querySelector('.progress-bar');
        const completeButton = document.querySelector('#missionForm button');
        const missionTimer = document.getElementById('missionTimer');
        const missionLog = document.getElementById('missionLog');

        // Fonction pour mettre à jour l'énergie d'un héros
        function updateHeroEnergy(heroId, energy) {
            const energyBar = document.querySelector(`[data-hero-id="${heroId}"] .progress-bar`);
            if (energyBar) {
                energyBar.style.width = `${energy}%`;
                energyBar.setAttribute('aria-valuenow', energy);
                energyBar.textContent = `${energy.toFixed(1)}%`;
                
                // Mettre à jour les classes de couleur
                energyBar.classList.remove('bg-success', 'bg-warning', 'bg-danger');
                if (energy < 20) {
                    energyBar.classList.add('bg-danger');
                } else if (energy < 50) {
                    energyBar.classList.add('bg-warning');
                } else {
                    energyBar.classList.add('bg-success');
                }
            }
        }

        // Fonction pour mettre à jour la progression
        function updateProgress() {
            fetch('{{ path('mission_update_progress', {'id': mission.id}) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    progress: progress
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mettre à jour l'énergie des héros
                    Object.entries(data.heroEnergies).forEach(([heroId, energy]) => {
                        updateHeroEnergy(heroId, energy);
                    });

                    // Ajouter les nouveaux logs
                    if (data.logs && data.logs.length > 0) {
                        data.logs.forEach(log => {
                            const logEntry = document.createElement('p');
                            logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${log}`;
                            missionLog.appendChild(logEntry);
                            missionLog.scrollTop = missionLog.scrollHeight;
                        });
                    }

                    progress = Math.min(100, progress + 1);
                    progressBar.style.width = `${progress}%`;
                    progressBar.setAttribute('aria-valuenow', progress);
                    progressBar.textContent = `${progress}%`;

                    if (progress >= 100) {
                        completeButton.disabled = false;
                        clearInterval(progressInterval);
                    }
                }
            })
            .catch(error => console.error('Error:', error));
        }

        // Mettre à jour la progression toutes les 2 secondes
        const progressInterval = setInterval(() => {
            if (progress < 100) {
                updateProgress();
            }
        }, 2000);

        // Timer de la mission
        const startTime = {{ mission.startedAt|date('U') }};
        const timeLimit = {{ mission.timeLimit }};

        function updateTimer() {
            const now = Math.floor(Date.now() / 1000);
            const elapsed = now - startTime;
            const remaining = Math.max(0, timeLimit - elapsed);
            
            const minutes = Math.floor(remaining / 60);
            const seconds = remaining % 60;
            
            missionTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            if (remaining <= 0) {
                clearInterval(timerInterval);
            }
        }

        const timerInterval = setInterval(updateTimer, 1000);
        updateTimer();
    });
    </script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
{% endblock %}
