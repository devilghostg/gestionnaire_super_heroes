{% extends 'base.html.twig' %}

{% block title %}Progression de la mission{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h1>{{ mission.title }}</h1>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-8">
                    <div class="progress" style="height: 25px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: 0%;" 
                             aria-valuenow="0" 
                             aria-valuemin="0" 
                             aria-valuemax="100">0%</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="timer-display text-center mb-2">
                        <h3 id="timer" class="mb-0">00:00</h3>
                        <small class="text-muted">Temps écoulé</small>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <div class="mission-status">
                        <h4>Journal de Mission</h4>
                        <div id="missionLog" class="mission-log p-3 bg-light rounded">
                            <div class="log-entry">
                                <p class="text-info">[Info] Début de la mission...</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="hero-status card">
                        <div class="card-body">
                            <h5 class="card-title">État du Héros</h5>
                            <p class="card-text">
                                <strong>Héros :</strong> {{ mission.superHero.name }}<br>
                                <strong>Énergie :</strong> 
                                <div class="progress">
                                    <div class="progress-bar bg-success" role="progressbar" 
                                         style="width: {{ mission.superHero.energy }}%;" 
                                         aria-valuenow="{{ mission.superHero.energy }}" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        {{ mission.superHero.energy }}%
                                    </div>
                                </div>
                            </p>
                            <form method="post" action="{{ path('app_mission_cancel', {'id': mission.id}) }}" class="d-inline" id="cancelForm">
                                <input type="hidden" name="_token" value="{{ csrf_token('cancel' ~ mission.id) }}">
                                <button type="submit" class="btn btn-danger w-100" onclick="return confirm('Êtes-vous sûr de vouloir annuler cette mission ?')">
                                    <i class="bi bi-x-circle"></i> Annuler la mission
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .mission-log {
        height: 300px;
        overflow-y: auto;
        font-family: monospace;
        background-color: #1a1a1a !important;
        color: #fff;
    }
    .log-entry {
        margin-bottom: 0.5rem;
    }
    .log-entry p {
        margin-bottom: 0.25rem;
        padding: 0.25rem 0.5rem;
        border-radius: 3px;
        font-size: 0.9rem;
    }
    .timer-display {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 5px;
    }
    .timer-display h3 {
        font-family: monospace;
        font-size: 2rem;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let progress = 0;
    const progressBar = document.querySelector('.progress-bar');
    const missionId = {{ mission.id }};
    const startTime = new Date().getTime();
    const timeLimit = {{ mission.timeLimit }};
    
    function updateTimer() {
        const currentTime = new Date().getTime();
        const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
        const minutes = Math.floor(elapsedSeconds / 60);
        const seconds = elapsedSeconds % 60;
        document.getElementById('timer').textContent = 
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    function addLogMessage(message, type = 'info') {
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        const timestamp = new Date().toLocaleTimeString();
        let colorClass = 'text-info';
        
        switch(type) {
            case 'success':
                colorClass = 'text-success';
                break;
            case 'error':
                colorClass = 'text-danger';
                break;
            case 'warning':
                colorClass = 'text-warning';
                break;
        }
        
        logEntry.innerHTML = `<p class="${colorClass}">[${timestamp}] ${message}</p>`;
        const missionLog = document.getElementById('missionLog');
        missionLog.appendChild(logEntry);
        missionLog.scrollTop = missionLog.scrollHeight;
    }
    
    function updateProgress() {
        progress += Math.random() * 5;
        if (progress > 100) progress = 100;
        
        progressBar.style.width = progress + '%';
        progressBar.setAttribute('aria-valuenow', progress);
        progressBar.textContent = Math.round(progress) + '%';
        
        // Générer des événements aléatoires
        if (Math.random() < 0.3) {
            const events = [
                { message: "Le héros combat un ennemi !", type: 'warning' },
                { message: "Une victime a été sauvée !", type: 'success' },
                { message: "Progression de la mission...", type: 'info' },
                { message: "Le héros utilise ses super-pouvoirs !", type: 'success' },
                { message: "Situation critique détectée !", type: 'error' },
                { message: "Zone sécurisée avec succès", type: 'success' }
            ];
            const event = events[Math.floor(Math.random() * events.length)];
            addLogMessage(event.message, event.type);
        }
        
        // Envoyer la progression au serveur
        fetch(`/mission/${missionId}/update-progress`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ progress: Math.round(progress) })
        });
        
        if (progress < 100) {
            setTimeout(updateProgress, 1000);
            updateTimer();
        } else {
            progressBar.classList.remove('progress-bar-animated');
            progressBar.classList.remove('progress-bar-striped');
            progressBar.classList.add('bg-success');
            
            // Créer une bannière de succès
            const successBanner = document.createElement('div');
            successBanner.className = 'alert alert-success text-center mt-3';
            successBanner.innerHTML = '<h4 class="mb-0"><i class="bi bi-check-circle"></i> Mission Terminée !</h4>';
            document.querySelector('.progress').parentNode.appendChild(successBanner);
            
            addLogMessage("Mission terminée avec succès !", 'success');
            addLogMessage("Redirection vers les détails de la mission...", 'info');
            
            // Rediriger vers la page de détails
            fetch(`/mission/${missionId}/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token('complete' ~ mission.id) }}'
                }
            })
            .then(() => {
                setTimeout(() => {
                    window.location.href = `/mission/${missionId}`;
                }, 2000);
            });
        }
    }
    
    // Démarrer la mise à jour
    updateProgress();
    // Mettre à jour le timer chaque seconde
    setInterval(updateTimer, 1000);
});
</script>
{% endblock %}
